/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * Mauzl API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import type {
  CategoryDto,
  CreateCategoryDto,
  CreateOrderDto,
  CreateProductDto,
  CreateUserDto,
  PaginatedProductDto,
  ProductDto,
  ProductsControllerFindAllParams,
  UpdateCategoryDto,
  UpdateOrderDto,
  UpdateProductDto,
  UpdateUserDto,
} from "../models";

export const appControllerGetHello = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.get(`http://localhost:4000/api/`, options);
};

export const getAppControllerGetHelloQueryKey = () => {
  return [`http://localhost:4000/api/`] as const;
};

export const getAppControllerGetHelloQueryOptions = <
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof appControllerGetHello>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAppControllerGetHelloQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof appControllerGetHello>>
  > = ({ signal }) => appControllerGetHello({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof appControllerGetHello>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AppControllerGetHelloQueryResult = NonNullable<
  Awaited<ReturnType<typeof appControllerGetHello>>
>;
export type AppControllerGetHelloQueryError = AxiosError<unknown>;

export function useAppControllerGetHello<
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = AxiosError<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof appControllerGetHello>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof appControllerGetHello>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useAppControllerGetHello<
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof appControllerGetHello>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof appControllerGetHello>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useAppControllerGetHello<
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof appControllerGetHello>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useAppControllerGetHello<
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof appControllerGetHello>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAppControllerGetHelloQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const usersControllerCreate = (
  createUserDto: CreateUserDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.post(`http://localhost:4000/api/users`, createUserDto, options);
};

export const getUsersControllerCreateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerCreate>>,
    TError,
    { data: CreateUserDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersControllerCreate>>,
  TError,
  { data: CreateUserDto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersControllerCreate>>,
    { data: CreateUserDto }
  > = (props) => {
    const { data } = props ?? {};

    return usersControllerCreate(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerCreate>>
>;
export type UsersControllerCreateMutationBody = CreateUserDto;
export type UsersControllerCreateMutationError = AxiosError<unknown>;

export const useUsersControllerCreate = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerCreate>>,
    TError,
    { data: CreateUserDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof usersControllerCreate>>,
  TError,
  { data: CreateUserDto },
  TContext
> => {
  const mutationOptions = getUsersControllerCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const usersControllerFindAll = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.get(`http://localhost:4000/api/users`, options);
};

export const getUsersControllerFindAllQueryKey = () => {
  return [`http://localhost:4000/api/users`] as const;
};

export const getUsersControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof usersControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof usersControllerFindAll>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUsersControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof usersControllerFindAll>>
  > = ({ signal }) => usersControllerFindAll({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof usersControllerFindAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type UsersControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerFindAll>>
>;
export type UsersControllerFindAllQueryError = AxiosError<unknown>;

export function useUsersControllerFindAll<
  TData = Awaited<ReturnType<typeof usersControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof usersControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof usersControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useUsersControllerFindAll<
  TData = Awaited<ReturnType<typeof usersControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof usersControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof usersControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useUsersControllerFindAll<
  TData = Awaited<ReturnType<typeof usersControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof usersControllerFindAll>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useUsersControllerFindAll<
  TData = Awaited<ReturnType<typeof usersControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof usersControllerFindAll>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getUsersControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const usersControllerFindOne = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.get(`http://localhost:4000/api/users/${id}`, options);
};

export const getUsersControllerFindOneQueryKey = (id: string) => {
  return [`http://localhost:4000/api/users/${id}`] as const;
};

export const getUsersControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof usersControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof usersControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUsersControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof usersControllerFindOne>>
  > = ({ signal }) => usersControllerFindOne(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof usersControllerFindOne>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type UsersControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerFindOne>>
>;
export type UsersControllerFindOneQueryError = AxiosError<unknown>;

export function useUsersControllerFindOne<
  TData = Awaited<ReturnType<typeof usersControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof usersControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useUsersControllerFindOne<
  TData = Awaited<ReturnType<typeof usersControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof usersControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useUsersControllerFindOne<
  TData = Awaited<ReturnType<typeof usersControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof usersControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useUsersControllerFindOne<
  TData = Awaited<ReturnType<typeof usersControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof usersControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getUsersControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const usersControllerUpdate = (
  id: string,
  updateUserDto: UpdateUserDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.patch(
    `http://localhost:4000/api/users/${id}`,
    updateUserDto,
    options,
  );
};

export const getUsersControllerUpdateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerUpdate>>,
    TError,
    { id: string; data: UpdateUserDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersControllerUpdate>>,
  TError,
  { id: string; data: UpdateUserDto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersControllerUpdate>>,
    { id: string; data: UpdateUserDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return usersControllerUpdate(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerUpdate>>
>;
export type UsersControllerUpdateMutationBody = UpdateUserDto;
export type UsersControllerUpdateMutationError = AxiosError<unknown>;

export const useUsersControllerUpdate = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerUpdate>>,
    TError,
    { id: string; data: UpdateUserDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof usersControllerUpdate>>,
  TError,
  { id: string; data: UpdateUserDto },
  TContext
> => {
  const mutationOptions = getUsersControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const usersControllerRemove = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.delete(`http://localhost:4000/api/users/${id}`, options);
};

export const getUsersControllerRemoveMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return usersControllerRemove(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerRemove>>
>;

export type UsersControllerRemoveMutationError = AxiosError<unknown>;

export const useUsersControllerRemove = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof usersControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getUsersControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions);
};

export const categoriesControllerCreate = (
  createCategoryDto: CreateCategoryDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.post(
    `http://localhost:4000/api/categories`,
    createCategoryDto,
    options,
  );
};

export const getCategoriesControllerCreateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof categoriesControllerCreate>>,
    TError,
    { data: CreateCategoryDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof categoriesControllerCreate>>,
  TError,
  { data: CreateCategoryDto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof categoriesControllerCreate>>,
    { data: CreateCategoryDto }
  > = (props) => {
    const { data } = props ?? {};

    return categoriesControllerCreate(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CategoriesControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof categoriesControllerCreate>>
>;
export type CategoriesControllerCreateMutationBody = CreateCategoryDto;
export type CategoriesControllerCreateMutationError = AxiosError<unknown>;

export const useCategoriesControllerCreate = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof categoriesControllerCreate>>,
    TError,
    { data: CreateCategoryDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof categoriesControllerCreate>>,
  TError,
  { data: CreateCategoryDto },
  TContext
> => {
  const mutationOptions = getCategoriesControllerCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const categoriesControllerFindAll = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<CategoryDto[]>> => {
  return axios.get(`http://localhost:4000/api/categories`, options);
};

export const getCategoriesControllerFindAllQueryKey = () => {
  return [`http://localhost:4000/api/categories`] as const;
};

export const getCategoriesControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof categoriesControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof categoriesControllerFindAll>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCategoriesControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof categoriesControllerFindAll>>
  > = ({ signal }) => categoriesControllerFindAll({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof categoriesControllerFindAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CategoriesControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof categoriesControllerFindAll>>
>;
export type CategoriesControllerFindAllQueryError = AxiosError<unknown>;

export function useCategoriesControllerFindAll<
  TData = Awaited<ReturnType<typeof categoriesControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof categoriesControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof categoriesControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useCategoriesControllerFindAll<
  TData = Awaited<ReturnType<typeof categoriesControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof categoriesControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof categoriesControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useCategoriesControllerFindAll<
  TData = Awaited<ReturnType<typeof categoriesControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof categoriesControllerFindAll>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useCategoriesControllerFindAll<
  TData = Awaited<ReturnType<typeof categoriesControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof categoriesControllerFindAll>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getCategoriesControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const categoriesControllerFindOne = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<CategoryDto>> => {
  return axios.get(`http://localhost:4000/api/categories/${id}`, options);
};

export const getCategoriesControllerFindOneQueryKey = (id: string) => {
  return [`http://localhost:4000/api/categories/${id}`] as const;
};

export const getCategoriesControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof categoriesControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof categoriesControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCategoriesControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof categoriesControllerFindOne>>
  > = ({ signal }) =>
    categoriesControllerFindOne(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof categoriesControllerFindOne>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CategoriesControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof categoriesControllerFindOne>>
>;
export type CategoriesControllerFindOneQueryError = AxiosError<unknown>;

export function useCategoriesControllerFindOne<
  TData = Awaited<ReturnType<typeof categoriesControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof categoriesControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof categoriesControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useCategoriesControllerFindOne<
  TData = Awaited<ReturnType<typeof categoriesControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof categoriesControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof categoriesControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useCategoriesControllerFindOne<
  TData = Awaited<ReturnType<typeof categoriesControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof categoriesControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useCategoriesControllerFindOne<
  TData = Awaited<ReturnType<typeof categoriesControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof categoriesControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getCategoriesControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const categoriesControllerUpdate = (
  id: string,
  updateCategoryDto: UpdateCategoryDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.patch(
    `http://localhost:4000/api/categories/${id}`,
    updateCategoryDto,
    options,
  );
};

export const getCategoriesControllerUpdateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof categoriesControllerUpdate>>,
    TError,
    { id: string; data: UpdateCategoryDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof categoriesControllerUpdate>>,
  TError,
  { id: string; data: UpdateCategoryDto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof categoriesControllerUpdate>>,
    { id: string; data: UpdateCategoryDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return categoriesControllerUpdate(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CategoriesControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof categoriesControllerUpdate>>
>;
export type CategoriesControllerUpdateMutationBody = UpdateCategoryDto;
export type CategoriesControllerUpdateMutationError = AxiosError<unknown>;

export const useCategoriesControllerUpdate = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof categoriesControllerUpdate>>,
    TError,
    { id: string; data: UpdateCategoryDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof categoriesControllerUpdate>>,
  TError,
  { id: string; data: UpdateCategoryDto },
  TContext
> => {
  const mutationOptions = getCategoriesControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const categoriesControllerRemove = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.delete(`http://localhost:4000/api/categories/${id}`, options);
};

export const getCategoriesControllerRemoveMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof categoriesControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof categoriesControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof categoriesControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return categoriesControllerRemove(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CategoriesControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof categoriesControllerRemove>>
>;

export type CategoriesControllerRemoveMutationError = AxiosError<unknown>;

export const useCategoriesControllerRemove = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof categoriesControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof categoriesControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getCategoriesControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions);
};

export const productsControllerCreate = (
  createProductDto: CreateProductDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.post(
    `http://localhost:4000/api/products`,
    createProductDto,
    options,
  );
};

export const getProductsControllerCreateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof productsControllerCreate>>,
    TError,
    { data: CreateProductDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof productsControllerCreate>>,
  TError,
  { data: CreateProductDto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof productsControllerCreate>>,
    { data: CreateProductDto }
  > = (props) => {
    const { data } = props ?? {};

    return productsControllerCreate(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ProductsControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof productsControllerCreate>>
>;
export type ProductsControllerCreateMutationBody = CreateProductDto;
export type ProductsControllerCreateMutationError = AxiosError<unknown>;

export const useProductsControllerCreate = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof productsControllerCreate>>,
    TError,
    { data: CreateProductDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof productsControllerCreate>>,
  TError,
  { data: CreateProductDto },
  TContext
> => {
  const mutationOptions = getProductsControllerCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const productsControllerFindAll = (
  params?: ProductsControllerFindAllParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PaginatedProductDto>> => {
  return axios.get(`http://localhost:4000/api/products`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getProductsControllerFindAllQueryKey = (
  params?: ProductsControllerFindAllParams,
) => {
  return [
    `http://localhost:4000/api/products`,
    ...(params ? [params] : []),
  ] as const;
};

export const getProductsControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof productsControllerFindAll>>,
  TError = AxiosError<unknown>,
>(
  params?: ProductsControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productsControllerFindAll>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getProductsControllerFindAllQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof productsControllerFindAll>>
  > = ({ signal }) =>
    productsControllerFindAll(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof productsControllerFindAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ProductsControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof productsControllerFindAll>>
>;
export type ProductsControllerFindAllQueryError = AxiosError<unknown>;

export function useProductsControllerFindAll<
  TData = Awaited<ReturnType<typeof productsControllerFindAll>>,
  TError = AxiosError<unknown>,
>(
  params: undefined | ProductsControllerFindAllParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productsControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof productsControllerFindAll>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useProductsControllerFindAll<
  TData = Awaited<ReturnType<typeof productsControllerFindAll>>,
  TError = AxiosError<unknown>,
>(
  params?: ProductsControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productsControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof productsControllerFindAll>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useProductsControllerFindAll<
  TData = Awaited<ReturnType<typeof productsControllerFindAll>>,
  TError = AxiosError<unknown>,
>(
  params?: ProductsControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productsControllerFindAll>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useProductsControllerFindAll<
  TData = Awaited<ReturnType<typeof productsControllerFindAll>>,
  TError = AxiosError<unknown>,
>(
  params?: ProductsControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productsControllerFindAll>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getProductsControllerFindAllQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const productsControllerFindOne = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ProductDto>> => {
  return axios.get(`http://localhost:4000/api/products/${id}`, options);
};

export const getProductsControllerFindOneQueryKey = (id: string) => {
  return [`http://localhost:4000/api/products/${id}`] as const;
};

export const getProductsControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof productsControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productsControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getProductsControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof productsControllerFindOne>>
  > = ({ signal }) =>
    productsControllerFindOne(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof productsControllerFindOne>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ProductsControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof productsControllerFindOne>>
>;
export type ProductsControllerFindOneQueryError = AxiosError<unknown>;

export function useProductsControllerFindOne<
  TData = Awaited<ReturnType<typeof productsControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productsControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof productsControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useProductsControllerFindOne<
  TData = Awaited<ReturnType<typeof productsControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productsControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof productsControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useProductsControllerFindOne<
  TData = Awaited<ReturnType<typeof productsControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productsControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useProductsControllerFindOne<
  TData = Awaited<ReturnType<typeof productsControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productsControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getProductsControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const productsControllerUpdate = (
  id: string,
  updateProductDto: UpdateProductDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.patch(
    `http://localhost:4000/api/products/${id}`,
    updateProductDto,
    options,
  );
};

export const getProductsControllerUpdateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof productsControllerUpdate>>,
    TError,
    { id: string; data: UpdateProductDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof productsControllerUpdate>>,
  TError,
  { id: string; data: UpdateProductDto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof productsControllerUpdate>>,
    { id: string; data: UpdateProductDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return productsControllerUpdate(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ProductsControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof productsControllerUpdate>>
>;
export type ProductsControllerUpdateMutationBody = UpdateProductDto;
export type ProductsControllerUpdateMutationError = AxiosError<unknown>;

export const useProductsControllerUpdate = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof productsControllerUpdate>>,
    TError,
    { id: string; data: UpdateProductDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof productsControllerUpdate>>,
  TError,
  { id: string; data: UpdateProductDto },
  TContext
> => {
  const mutationOptions = getProductsControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const productsControllerRemove = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.delete(`http://localhost:4000/api/products/${id}`, options);
};

export const getProductsControllerRemoveMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof productsControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof productsControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof productsControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return productsControllerRemove(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ProductsControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof productsControllerRemove>>
>;

export type ProductsControllerRemoveMutationError = AxiosError<unknown>;

export const useProductsControllerRemove = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof productsControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof productsControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getProductsControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions);
};

export const ordersControllerCreate = (
  createOrderDto: CreateOrderDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.post(
    `http://localhost:4000/api/orders`,
    createOrderDto,
    options,
  );
};

export const getOrdersControllerCreateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ordersControllerCreate>>,
    TError,
    { data: CreateOrderDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof ordersControllerCreate>>,
  TError,
  { data: CreateOrderDto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof ordersControllerCreate>>,
    { data: CreateOrderDto }
  > = (props) => {
    const { data } = props ?? {};

    return ordersControllerCreate(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type OrdersControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof ordersControllerCreate>>
>;
export type OrdersControllerCreateMutationBody = CreateOrderDto;
export type OrdersControllerCreateMutationError = AxiosError<unknown>;

export const useOrdersControllerCreate = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ordersControllerCreate>>,
    TError,
    { data: CreateOrderDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof ordersControllerCreate>>,
  TError,
  { data: CreateOrderDto },
  TContext
> => {
  const mutationOptions = getOrdersControllerCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const ordersControllerFindAll = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.get(`http://localhost:4000/api/orders`, options);
};

export const getOrdersControllerFindAllQueryKey = () => {
  return [`http://localhost:4000/api/orders`] as const;
};

export const getOrdersControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof ordersControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof ordersControllerFindAll>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getOrdersControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ordersControllerFindAll>>
  > = ({ signal }) => ordersControllerFindAll({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ordersControllerFindAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type OrdersControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof ordersControllerFindAll>>
>;
export type OrdersControllerFindAllQueryError = AxiosError<unknown>;

export function useOrdersControllerFindAll<
  TData = Awaited<ReturnType<typeof ordersControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof ordersControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof ordersControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useOrdersControllerFindAll<
  TData = Awaited<ReturnType<typeof ordersControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof ordersControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof ordersControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useOrdersControllerFindAll<
  TData = Awaited<ReturnType<typeof ordersControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof ordersControllerFindAll>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useOrdersControllerFindAll<
  TData = Awaited<ReturnType<typeof ordersControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof ordersControllerFindAll>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getOrdersControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const ordersControllerFindOne = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.get(`http://localhost:4000/api/orders/${id}`, options);
};

export const getOrdersControllerFindOneQueryKey = (id: string) => {
  return [`http://localhost:4000/api/orders/${id}`] as const;
};

export const getOrdersControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof ordersControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ordersControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getOrdersControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ordersControllerFindOne>>
  > = ({ signal }) => ordersControllerFindOne(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof ordersControllerFindOne>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type OrdersControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof ordersControllerFindOne>>
>;
export type OrdersControllerFindOneQueryError = AxiosError<unknown>;

export function useOrdersControllerFindOne<
  TData = Awaited<ReturnType<typeof ordersControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ordersControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ordersControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useOrdersControllerFindOne<
  TData = Awaited<ReturnType<typeof ordersControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ordersControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ordersControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useOrdersControllerFindOne<
  TData = Awaited<ReturnType<typeof ordersControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ordersControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useOrdersControllerFindOne<
  TData = Awaited<ReturnType<typeof ordersControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ordersControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getOrdersControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const ordersControllerUpdate = (
  id: string,
  updateOrderDto: UpdateOrderDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.patch(
    `http://localhost:4000/api/orders/${id}`,
    updateOrderDto,
    options,
  );
};

export const getOrdersControllerUpdateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ordersControllerUpdate>>,
    TError,
    { id: string; data: UpdateOrderDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof ordersControllerUpdate>>,
  TError,
  { id: string; data: UpdateOrderDto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof ordersControllerUpdate>>,
    { id: string; data: UpdateOrderDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return ordersControllerUpdate(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type OrdersControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof ordersControllerUpdate>>
>;
export type OrdersControllerUpdateMutationBody = UpdateOrderDto;
export type OrdersControllerUpdateMutationError = AxiosError<unknown>;

export const useOrdersControllerUpdate = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ordersControllerUpdate>>,
    TError,
    { id: string; data: UpdateOrderDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof ordersControllerUpdate>>,
  TError,
  { id: string; data: UpdateOrderDto },
  TContext
> => {
  const mutationOptions = getOrdersControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const ordersControllerRemove = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.delete(`http://localhost:4000/api/orders/${id}`, options);
};

export const getOrdersControllerRemoveMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ordersControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof ordersControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof ordersControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return ordersControllerRemove(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type OrdersControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof ordersControllerRemove>>
>;

export type OrdersControllerRemoveMutationError = AxiosError<unknown>;

export const useOrdersControllerRemove = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ordersControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof ordersControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getOrdersControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions);
};

export const orderItemsControllerFindAll = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.get(`http://localhost:4000/api/order-items`, options);
};

export const getOrderItemsControllerFindAllQueryKey = () => {
  return [`http://localhost:4000/api/order-items`] as const;
};

export const getOrderItemsControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof orderItemsControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof orderItemsControllerFindAll>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getOrderItemsControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof orderItemsControllerFindAll>>
  > = ({ signal }) => orderItemsControllerFindAll({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof orderItemsControllerFindAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type OrderItemsControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof orderItemsControllerFindAll>>
>;
export type OrderItemsControllerFindAllQueryError = AxiosError<unknown>;

export function useOrderItemsControllerFindAll<
  TData = Awaited<ReturnType<typeof orderItemsControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof orderItemsControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof orderItemsControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useOrderItemsControllerFindAll<
  TData = Awaited<ReturnType<typeof orderItemsControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof orderItemsControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof orderItemsControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useOrderItemsControllerFindAll<
  TData = Awaited<ReturnType<typeof orderItemsControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof orderItemsControllerFindAll>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useOrderItemsControllerFindAll<
  TData = Awaited<ReturnType<typeof orderItemsControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof orderItemsControllerFindAll>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getOrderItemsControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const orderItemsControllerFindOne = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.get(`http://localhost:4000/api/order-items/${id}`, options);
};

export const getOrderItemsControllerFindOneQueryKey = (id: string) => {
  return [`http://localhost:4000/api/order-items/${id}`] as const;
};

export const getOrderItemsControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof orderItemsControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof orderItemsControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getOrderItemsControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof orderItemsControllerFindOne>>
  > = ({ signal }) =>
    orderItemsControllerFindOne(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof orderItemsControllerFindOne>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type OrderItemsControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof orderItemsControllerFindOne>>
>;
export type OrderItemsControllerFindOneQueryError = AxiosError<unknown>;

export function useOrderItemsControllerFindOne<
  TData = Awaited<ReturnType<typeof orderItemsControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof orderItemsControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof orderItemsControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useOrderItemsControllerFindOne<
  TData = Awaited<ReturnType<typeof orderItemsControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof orderItemsControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof orderItemsControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useOrderItemsControllerFindOne<
  TData = Awaited<ReturnType<typeof orderItemsControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof orderItemsControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useOrderItemsControllerFindOne<
  TData = Awaited<ReturnType<typeof orderItemsControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof orderItemsControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getOrderItemsControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const paymentsControllerFindAll = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.get(`http://localhost:4000/api/payments`, options);
};

export const getPaymentsControllerFindAllQueryKey = () => {
  return [`http://localhost:4000/api/payments`] as const;
};

export const getPaymentsControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof paymentsControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof paymentsControllerFindAll>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getPaymentsControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof paymentsControllerFindAll>>
  > = ({ signal }) => paymentsControllerFindAll({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof paymentsControllerFindAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type PaymentsControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof paymentsControllerFindAll>>
>;
export type PaymentsControllerFindAllQueryError = AxiosError<unknown>;

export function usePaymentsControllerFindAll<
  TData = Awaited<ReturnType<typeof paymentsControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof paymentsControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof paymentsControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function usePaymentsControllerFindAll<
  TData = Awaited<ReturnType<typeof paymentsControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof paymentsControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof paymentsControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function usePaymentsControllerFindAll<
  TData = Awaited<ReturnType<typeof paymentsControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof paymentsControllerFindAll>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function usePaymentsControllerFindAll<
  TData = Awaited<ReturnType<typeof paymentsControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof paymentsControllerFindAll>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getPaymentsControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const paymentsControllerFindOne = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.get(`http://localhost:4000/api/payments/${id}`, options);
};

export const getPaymentsControllerFindOneQueryKey = (id: string) => {
  return [`http://localhost:4000/api/payments/${id}`] as const;
};

export const getPaymentsControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof paymentsControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof paymentsControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getPaymentsControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof paymentsControllerFindOne>>
  > = ({ signal }) =>
    paymentsControllerFindOne(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof paymentsControllerFindOne>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type PaymentsControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof paymentsControllerFindOne>>
>;
export type PaymentsControllerFindOneQueryError = AxiosError<unknown>;

export function usePaymentsControllerFindOne<
  TData = Awaited<ReturnType<typeof paymentsControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof paymentsControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof paymentsControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function usePaymentsControllerFindOne<
  TData = Awaited<ReturnType<typeof paymentsControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof paymentsControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof paymentsControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function usePaymentsControllerFindOne<
  TData = Awaited<ReturnType<typeof paymentsControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof paymentsControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function usePaymentsControllerFindOne<
  TData = Awaited<ReturnType<typeof paymentsControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof paymentsControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getPaymentsControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const wishListsControllerFindAll = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.get(`http://localhost:4000/api/wish-lists`, options);
};

export const getWishListsControllerFindAllQueryKey = () => {
  return [`http://localhost:4000/api/wish-lists`] as const;
};

export const getWishListsControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof wishListsControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof wishListsControllerFindAll>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getWishListsControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof wishListsControllerFindAll>>
  > = ({ signal }) => wishListsControllerFindAll({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof wishListsControllerFindAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type WishListsControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof wishListsControllerFindAll>>
>;
export type WishListsControllerFindAllQueryError = AxiosError<unknown>;

export function useWishListsControllerFindAll<
  TData = Awaited<ReturnType<typeof wishListsControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof wishListsControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof wishListsControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useWishListsControllerFindAll<
  TData = Awaited<ReturnType<typeof wishListsControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof wishListsControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof wishListsControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useWishListsControllerFindAll<
  TData = Awaited<ReturnType<typeof wishListsControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof wishListsControllerFindAll>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useWishListsControllerFindAll<
  TData = Awaited<ReturnType<typeof wishListsControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof wishListsControllerFindAll>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getWishListsControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const wishListsControllerFindOne = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.get(`http://localhost:4000/api/wish-lists/${id}`, options);
};

export const getWishListsControllerFindOneQueryKey = (id: string) => {
  return [`http://localhost:4000/api/wish-lists/${id}`] as const;
};

export const getWishListsControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof wishListsControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof wishListsControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getWishListsControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof wishListsControllerFindOne>>
  > = ({ signal }) =>
    wishListsControllerFindOne(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof wishListsControllerFindOne>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type WishListsControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof wishListsControllerFindOne>>
>;
export type WishListsControllerFindOneQueryError = AxiosError<unknown>;

export function useWishListsControllerFindOne<
  TData = Awaited<ReturnType<typeof wishListsControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof wishListsControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof wishListsControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useWishListsControllerFindOne<
  TData = Awaited<ReturnType<typeof wishListsControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof wishListsControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof wishListsControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useWishListsControllerFindOne<
  TData = Awaited<ReturnType<typeof wishListsControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof wishListsControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useWishListsControllerFindOne<
  TData = Awaited<ReturnType<typeof wishListsControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof wishListsControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getWishListsControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const reviewsControllerFindAll = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.get(`http://localhost:4000/api/reviews`, options);
};

export const getReviewsControllerFindAllQueryKey = () => {
  return [`http://localhost:4000/api/reviews`] as const;
};

export const getReviewsControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof reviewsControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof reviewsControllerFindAll>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getReviewsControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof reviewsControllerFindAll>>
  > = ({ signal }) => reviewsControllerFindAll({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof reviewsControllerFindAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ReviewsControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof reviewsControllerFindAll>>
>;
export type ReviewsControllerFindAllQueryError = AxiosError<unknown>;

export function useReviewsControllerFindAll<
  TData = Awaited<ReturnType<typeof reviewsControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof reviewsControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof reviewsControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useReviewsControllerFindAll<
  TData = Awaited<ReturnType<typeof reviewsControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof reviewsControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof reviewsControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useReviewsControllerFindAll<
  TData = Awaited<ReturnType<typeof reviewsControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof reviewsControllerFindAll>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useReviewsControllerFindAll<
  TData = Awaited<ReturnType<typeof reviewsControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof reviewsControllerFindAll>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getReviewsControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const reviewsControllerFindOne = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.get(`http://localhost:4000/api/reviews/${id}`, options);
};

export const getReviewsControllerFindOneQueryKey = (id: string) => {
  return [`http://localhost:4000/api/reviews/${id}`] as const;
};

export const getReviewsControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof reviewsControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof reviewsControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getReviewsControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof reviewsControllerFindOne>>
  > = ({ signal }) => reviewsControllerFindOne(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof reviewsControllerFindOne>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ReviewsControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof reviewsControllerFindOne>>
>;
export type ReviewsControllerFindOneQueryError = AxiosError<unknown>;

export function useReviewsControllerFindOne<
  TData = Awaited<ReturnType<typeof reviewsControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof reviewsControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof reviewsControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useReviewsControllerFindOne<
  TData = Awaited<ReturnType<typeof reviewsControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof reviewsControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof reviewsControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useReviewsControllerFindOne<
  TData = Awaited<ReturnType<typeof reviewsControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof reviewsControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useReviewsControllerFindOne<
  TData = Awaited<ReturnType<typeof reviewsControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof reviewsControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getReviewsControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const clientsControllerFindAll = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.get(`http://localhost:4000/api/clients`, options);
};

export const getClientsControllerFindAllQueryKey = () => {
  return [`http://localhost:4000/api/clients`] as const;
};

export const getClientsControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof clientsControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof clientsControllerFindAll>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getClientsControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof clientsControllerFindAll>>
  > = ({ signal }) => clientsControllerFindAll({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof clientsControllerFindAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ClientsControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof clientsControllerFindAll>>
>;
export type ClientsControllerFindAllQueryError = AxiosError<unknown>;

export function useClientsControllerFindAll<
  TData = Awaited<ReturnType<typeof clientsControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof clientsControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof clientsControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useClientsControllerFindAll<
  TData = Awaited<ReturnType<typeof clientsControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof clientsControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof clientsControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useClientsControllerFindAll<
  TData = Awaited<ReturnType<typeof clientsControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof clientsControllerFindAll>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useClientsControllerFindAll<
  TData = Awaited<ReturnType<typeof clientsControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof clientsControllerFindAll>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getClientsControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const clientsControllerFindOne = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.get(`http://localhost:4000/api/clients/${id}`, options);
};

export const getClientsControllerFindOneQueryKey = (id: string) => {
  return [`http://localhost:4000/api/clients/${id}`] as const;
};

export const getClientsControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof clientsControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof clientsControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getClientsControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof clientsControllerFindOne>>
  > = ({ signal }) => clientsControllerFindOne(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof clientsControllerFindOne>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ClientsControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof clientsControllerFindOne>>
>;
export type ClientsControllerFindOneQueryError = AxiosError<unknown>;

export function useClientsControllerFindOne<
  TData = Awaited<ReturnType<typeof clientsControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof clientsControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof clientsControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useClientsControllerFindOne<
  TData = Awaited<ReturnType<typeof clientsControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof clientsControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof clientsControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useClientsControllerFindOne<
  TData = Awaited<ReturnType<typeof clientsControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof clientsControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useClientsControllerFindOne<
  TData = Awaited<ReturnType<typeof clientsControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof clientsControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getClientsControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const imageControllerUploadImage = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.post(
    `http://localhost:4000/api/images/upload`,
    undefined,
    options,
  );
};

export const getImageControllerUploadImageMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof imageControllerUploadImage>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof imageControllerUploadImage>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof imageControllerUploadImage>>,
    void
  > = () => {
    return imageControllerUploadImage(axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ImageControllerUploadImageMutationResult = NonNullable<
  Awaited<ReturnType<typeof imageControllerUploadImage>>
>;

export type ImageControllerUploadImageMutationError = AxiosError<unknown>;

export const useImageControllerUploadImage = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof imageControllerUploadImage>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof imageControllerUploadImage>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getImageControllerUploadImageMutationOptions(options);

  return useMutation(mutationOptions);
};

export const imageControllerGetImageLink = (
  image: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.get(`http://localhost:4000/api/images/${image}`, options);
};

export const getImageControllerGetImageLinkQueryKey = (image: string) => {
  return [`http://localhost:4000/api/images/${image}`] as const;
};

export const getImageControllerGetImageLinkQueryOptions = <
  TData = Awaited<ReturnType<typeof imageControllerGetImageLink>>,
  TError = AxiosError<unknown>,
>(
  image: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof imageControllerGetImageLink>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getImageControllerGetImageLinkQueryKey(image);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof imageControllerGetImageLink>>
  > = ({ signal }) =>
    imageControllerGetImageLink(image, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!image,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof imageControllerGetImageLink>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ImageControllerGetImageLinkQueryResult = NonNullable<
  Awaited<ReturnType<typeof imageControllerGetImageLink>>
>;
export type ImageControllerGetImageLinkQueryError = AxiosError<unknown>;

export function useImageControllerGetImageLink<
  TData = Awaited<ReturnType<typeof imageControllerGetImageLink>>,
  TError = AxiosError<unknown>,
>(
  image: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof imageControllerGetImageLink>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof imageControllerGetImageLink>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useImageControllerGetImageLink<
  TData = Awaited<ReturnType<typeof imageControllerGetImageLink>>,
  TError = AxiosError<unknown>,
>(
  image: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof imageControllerGetImageLink>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof imageControllerGetImageLink>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useImageControllerGetImageLink<
  TData = Awaited<ReturnType<typeof imageControllerGetImageLink>>,
  TError = AxiosError<unknown>,
>(
  image: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof imageControllerGetImageLink>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useImageControllerGetImageLink<
  TData = Awaited<ReturnType<typeof imageControllerGetImageLink>>,
  TError = AxiosError<unknown>,
>(
  image: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof imageControllerGetImageLink>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getImageControllerGetImageLinkQueryOptions(
    image,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
