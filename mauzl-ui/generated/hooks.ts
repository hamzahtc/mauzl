/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * Mauzl API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  CategoryDto,
  CreateCategoryDto,
  CreateOrderDto,
  CreateProductDto,
  CreateUserDto,
  PaginatedProductDto,
  ProductDto,
  ProductsControllerFindAllParams,
  UpdateCategoryDto,
  UpdateOrderDto,
  UpdateProductDto,
  UpdateUserDto,
  UserDto,
} from "../models";
import { customInstance } from "../utils/axios";
import type { ErrorType, BodyType } from "../utils/axios";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const appControllerGetHello = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>({ url: `/api/`, method: "GET", signal }, options);
};

export const getAppControllerGetHelloQueryKey = () => {
  return [`/api/`] as const;
};

export const getAppControllerGetHelloQueryOptions = <
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof appControllerGetHello>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAppControllerGetHelloQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof appControllerGetHello>>
  > = ({ signal }) => appControllerGetHello(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof appControllerGetHello>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AppControllerGetHelloQueryResult = NonNullable<
  Awaited<ReturnType<typeof appControllerGetHello>>
>;
export type AppControllerGetHelloQueryError = ErrorType<unknown>;

export function useAppControllerGetHello<
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = ErrorType<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof appControllerGetHello>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof appControllerGetHello>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useAppControllerGetHello<
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof appControllerGetHello>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof appControllerGetHello>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useAppControllerGetHello<
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof appControllerGetHello>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useAppControllerGetHello<
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof appControllerGetHello>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAppControllerGetHelloQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const usersControllerCreate = (
  createUserDto: BodyType<CreateUserDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/api/users`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createUserDto,
    },
    options,
  );
};

export const getUsersControllerCreateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerCreate>>,
    TError,
    { data: BodyType<CreateUserDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersControllerCreate>>,
  TError,
  { data: BodyType<CreateUserDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersControllerCreate>>,
    { data: BodyType<CreateUserDto> }
  > = (props) => {
    const { data } = props ?? {};

    return usersControllerCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerCreate>>
>;
export type UsersControllerCreateMutationBody = BodyType<CreateUserDto>;
export type UsersControllerCreateMutationError = ErrorType<unknown>;

export const useUsersControllerCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerCreate>>,
    TError,
    { data: BodyType<CreateUserDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof usersControllerCreate>>,
  TError,
  { data: BodyType<CreateUserDto> },
  TContext
> => {
  const mutationOptions = getUsersControllerCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const usersControllerFindAll = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/api/users`, method: "GET", signal },
    options,
  );
};

export const getUsersControllerFindAllQueryKey = () => {
  return [`/api/users`] as const;
};

export const getUsersControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof usersControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof usersControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUsersControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof usersControllerFindAll>>
  > = ({ signal }) => usersControllerFindAll(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof usersControllerFindAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type UsersControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerFindAll>>
>;
export type UsersControllerFindAllQueryError = ErrorType<unknown>;

export function useUsersControllerFindAll<
  TData = Awaited<ReturnType<typeof usersControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof usersControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof usersControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useUsersControllerFindAll<
  TData = Awaited<ReturnType<typeof usersControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof usersControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof usersControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useUsersControllerFindAll<
  TData = Awaited<ReturnType<typeof usersControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof usersControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useUsersControllerFindAll<
  TData = Awaited<ReturnType<typeof usersControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof usersControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getUsersControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const usersControllerFindMe = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<UserDto>(
    { url: `/api/users/me`, method: "GET", signal },
    options,
  );
};

export const getUsersControllerFindMeQueryKey = () => {
  return [`/api/users/me`] as const;
};

export const getUsersControllerFindMeQueryOptions = <
  TData = Awaited<ReturnType<typeof usersControllerFindMe>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof usersControllerFindMe>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUsersControllerFindMeQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof usersControllerFindMe>>
  > = ({ signal }) => usersControllerFindMe(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof usersControllerFindMe>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type UsersControllerFindMeQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerFindMe>>
>;
export type UsersControllerFindMeQueryError = ErrorType<unknown>;

export function useUsersControllerFindMe<
  TData = Awaited<ReturnType<typeof usersControllerFindMe>>,
  TError = ErrorType<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof usersControllerFindMe>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof usersControllerFindMe>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useUsersControllerFindMe<
  TData = Awaited<ReturnType<typeof usersControllerFindMe>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof usersControllerFindMe>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof usersControllerFindMe>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useUsersControllerFindMe<
  TData = Awaited<ReturnType<typeof usersControllerFindMe>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof usersControllerFindMe>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useUsersControllerFindMe<
  TData = Awaited<ReturnType<typeof usersControllerFindMe>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof usersControllerFindMe>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getUsersControllerFindMeQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const usersControllerFindOne = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/api/users/${id}`, method: "GET", signal },
    options,
  );
};

export const getUsersControllerFindOneQueryKey = (id: string) => {
  return [`/api/users/${id}`] as const;
};

export const getUsersControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof usersControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof usersControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUsersControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof usersControllerFindOne>>
  > = ({ signal }) => usersControllerFindOne(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof usersControllerFindOne>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type UsersControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerFindOne>>
>;
export type UsersControllerFindOneQueryError = ErrorType<unknown>;

export function useUsersControllerFindOne<
  TData = Awaited<ReturnType<typeof usersControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof usersControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useUsersControllerFindOne<
  TData = Awaited<ReturnType<typeof usersControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof usersControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useUsersControllerFindOne<
  TData = Awaited<ReturnType<typeof usersControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof usersControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useUsersControllerFindOne<
  TData = Awaited<ReturnType<typeof usersControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof usersControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getUsersControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const usersControllerUpdate = (
  id: string,
  updateUserDto: BodyType<UpdateUserDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/api/users/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateUserDto,
    },
    options,
  );
};

export const getUsersControllerUpdateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerUpdate>>,
    TError,
    { id: string; data: BodyType<UpdateUserDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersControllerUpdate>>,
  TError,
  { id: string; data: BodyType<UpdateUserDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersControllerUpdate>>,
    { id: string; data: BodyType<UpdateUserDto> }
  > = (props) => {
    const { id, data } = props ?? {};

    return usersControllerUpdate(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerUpdate>>
>;
export type UsersControllerUpdateMutationBody = BodyType<UpdateUserDto>;
export type UsersControllerUpdateMutationError = ErrorType<unknown>;

export const useUsersControllerUpdate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerUpdate>>,
    TError,
    { id: string; data: BodyType<UpdateUserDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof usersControllerUpdate>>,
  TError,
  { id: string; data: BodyType<UpdateUserDto> },
  TContext
> => {
  const mutationOptions = getUsersControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const usersControllerRemove = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/users/${id}`, method: "DELETE" },
    options,
  );
};

export const getUsersControllerRemoveMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return usersControllerRemove(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerRemove>>
>;

export type UsersControllerRemoveMutationError = ErrorType<unknown>;

export const useUsersControllerRemove = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof usersControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getUsersControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions);
};

export const categoriesControllerCreate = (
  createCategoryDto: BodyType<CreateCategoryDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/api/categories`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createCategoryDto,
    },
    options,
  );
};

export const getCategoriesControllerCreateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof categoriesControllerCreate>>,
    TError,
    { data: BodyType<CreateCategoryDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof categoriesControllerCreate>>,
  TError,
  { data: BodyType<CreateCategoryDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof categoriesControllerCreate>>,
    { data: BodyType<CreateCategoryDto> }
  > = (props) => {
    const { data } = props ?? {};

    return categoriesControllerCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CategoriesControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof categoriesControllerCreate>>
>;
export type CategoriesControllerCreateMutationBody =
  BodyType<CreateCategoryDto>;
export type CategoriesControllerCreateMutationError = ErrorType<unknown>;

export const useCategoriesControllerCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof categoriesControllerCreate>>,
    TError,
    { data: BodyType<CreateCategoryDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof categoriesControllerCreate>>,
  TError,
  { data: BodyType<CreateCategoryDto> },
  TContext
> => {
  const mutationOptions = getCategoriesControllerCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const categoriesControllerFindAll = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<CategoryDto[]>(
    { url: `/api/categories`, method: "GET", signal },
    options,
  );
};

export const getCategoriesControllerFindAllQueryKey = () => {
  return [`/api/categories`] as const;
};

export const getCategoriesControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof categoriesControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof categoriesControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCategoriesControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof categoriesControllerFindAll>>
  > = ({ signal }) => categoriesControllerFindAll(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof categoriesControllerFindAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CategoriesControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof categoriesControllerFindAll>>
>;
export type CategoriesControllerFindAllQueryError = ErrorType<unknown>;

export function useCategoriesControllerFindAll<
  TData = Awaited<ReturnType<typeof categoriesControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof categoriesControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof categoriesControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useCategoriesControllerFindAll<
  TData = Awaited<ReturnType<typeof categoriesControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof categoriesControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof categoriesControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useCategoriesControllerFindAll<
  TData = Awaited<ReturnType<typeof categoriesControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof categoriesControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useCategoriesControllerFindAll<
  TData = Awaited<ReturnType<typeof categoriesControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof categoriesControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getCategoriesControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const categoriesControllerFindOne = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<CategoryDto>(
    { url: `/api/categories/${id}`, method: "GET", signal },
    options,
  );
};

export const getCategoriesControllerFindOneQueryKey = (id: string) => {
  return [`/api/categories/${id}`] as const;
};

export const getCategoriesControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof categoriesControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof categoriesControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCategoriesControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof categoriesControllerFindOne>>
  > = ({ signal }) => categoriesControllerFindOne(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof categoriesControllerFindOne>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CategoriesControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof categoriesControllerFindOne>>
>;
export type CategoriesControllerFindOneQueryError = ErrorType<unknown>;

export function useCategoriesControllerFindOne<
  TData = Awaited<ReturnType<typeof categoriesControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof categoriesControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof categoriesControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useCategoriesControllerFindOne<
  TData = Awaited<ReturnType<typeof categoriesControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof categoriesControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof categoriesControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useCategoriesControllerFindOne<
  TData = Awaited<ReturnType<typeof categoriesControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof categoriesControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useCategoriesControllerFindOne<
  TData = Awaited<ReturnType<typeof categoriesControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof categoriesControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getCategoriesControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const categoriesControllerUpdate = (
  id: string,
  updateCategoryDto: BodyType<UpdateCategoryDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/api/categories/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateCategoryDto,
    },
    options,
  );
};

export const getCategoriesControllerUpdateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof categoriesControllerUpdate>>,
    TError,
    { id: string; data: BodyType<UpdateCategoryDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof categoriesControllerUpdate>>,
  TError,
  { id: string; data: BodyType<UpdateCategoryDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof categoriesControllerUpdate>>,
    { id: string; data: BodyType<UpdateCategoryDto> }
  > = (props) => {
    const { id, data } = props ?? {};

    return categoriesControllerUpdate(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CategoriesControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof categoriesControllerUpdate>>
>;
export type CategoriesControllerUpdateMutationBody =
  BodyType<UpdateCategoryDto>;
export type CategoriesControllerUpdateMutationError = ErrorType<unknown>;

export const useCategoriesControllerUpdate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof categoriesControllerUpdate>>,
    TError,
    { id: string; data: BodyType<UpdateCategoryDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof categoriesControllerUpdate>>,
  TError,
  { id: string; data: BodyType<UpdateCategoryDto> },
  TContext
> => {
  const mutationOptions = getCategoriesControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const categoriesControllerRemove = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/categories/${id}`, method: "DELETE" },
    options,
  );
};

export const getCategoriesControllerRemoveMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof categoriesControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof categoriesControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof categoriesControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return categoriesControllerRemove(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CategoriesControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof categoriesControllerRemove>>
>;

export type CategoriesControllerRemoveMutationError = ErrorType<unknown>;

export const useCategoriesControllerRemove = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof categoriesControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof categoriesControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getCategoriesControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions);
};

export const productsControllerCreate = (
  createProductDto: BodyType<CreateProductDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/api/products`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createProductDto,
    },
    options,
  );
};

export const getProductsControllerCreateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof productsControllerCreate>>,
    TError,
    { data: BodyType<CreateProductDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof productsControllerCreate>>,
  TError,
  { data: BodyType<CreateProductDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof productsControllerCreate>>,
    { data: BodyType<CreateProductDto> }
  > = (props) => {
    const { data } = props ?? {};

    return productsControllerCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ProductsControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof productsControllerCreate>>
>;
export type ProductsControllerCreateMutationBody = BodyType<CreateProductDto>;
export type ProductsControllerCreateMutationError = ErrorType<unknown>;

export const useProductsControllerCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof productsControllerCreate>>,
    TError,
    { data: BodyType<CreateProductDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof productsControllerCreate>>,
  TError,
  { data: BodyType<CreateProductDto> },
  TContext
> => {
  const mutationOptions = getProductsControllerCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const productsControllerFindAll = (
  params?: ProductsControllerFindAllParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PaginatedProductDto>(
    { url: `/api/products`, method: "GET", params, signal },
    options,
  );
};

export const getProductsControllerFindAllQueryKey = (
  params?: ProductsControllerFindAllParams,
) => {
  return [`/api/products`, ...(params ? [params] : [])] as const;
};

export const getProductsControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof productsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  params?: ProductsControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productsControllerFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getProductsControllerFindAllQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof productsControllerFindAll>>
  > = ({ signal }) => productsControllerFindAll(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof productsControllerFindAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ProductsControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof productsControllerFindAll>>
>;
export type ProductsControllerFindAllQueryError = ErrorType<unknown>;

export function useProductsControllerFindAll<
  TData = Awaited<ReturnType<typeof productsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | ProductsControllerFindAllParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productsControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof productsControllerFindAll>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useProductsControllerFindAll<
  TData = Awaited<ReturnType<typeof productsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  params?: ProductsControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productsControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof productsControllerFindAll>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useProductsControllerFindAll<
  TData = Awaited<ReturnType<typeof productsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  params?: ProductsControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productsControllerFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useProductsControllerFindAll<
  TData = Awaited<ReturnType<typeof productsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  params?: ProductsControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productsControllerFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getProductsControllerFindAllQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const productsControllerFindOne = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ProductDto>(
    { url: `/api/products/${id}`, method: "GET", signal },
    options,
  );
};

export const getProductsControllerFindOneQueryKey = (id: string) => {
  return [`/api/products/${id}`] as const;
};

export const getProductsControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof productsControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productsControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getProductsControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof productsControllerFindOne>>
  > = ({ signal }) => productsControllerFindOne(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof productsControllerFindOne>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ProductsControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof productsControllerFindOne>>
>;
export type ProductsControllerFindOneQueryError = ErrorType<unknown>;

export function useProductsControllerFindOne<
  TData = Awaited<ReturnType<typeof productsControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productsControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof productsControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useProductsControllerFindOne<
  TData = Awaited<ReturnType<typeof productsControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productsControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof productsControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useProductsControllerFindOne<
  TData = Awaited<ReturnType<typeof productsControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productsControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useProductsControllerFindOne<
  TData = Awaited<ReturnType<typeof productsControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productsControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getProductsControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const productsControllerUpdate = (
  id: string,
  updateProductDto: BodyType<UpdateProductDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/api/products/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateProductDto,
    },
    options,
  );
};

export const getProductsControllerUpdateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof productsControllerUpdate>>,
    TError,
    { id: string; data: BodyType<UpdateProductDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof productsControllerUpdate>>,
  TError,
  { id: string; data: BodyType<UpdateProductDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof productsControllerUpdate>>,
    { id: string; data: BodyType<UpdateProductDto> }
  > = (props) => {
    const { id, data } = props ?? {};

    return productsControllerUpdate(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ProductsControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof productsControllerUpdate>>
>;
export type ProductsControllerUpdateMutationBody = BodyType<UpdateProductDto>;
export type ProductsControllerUpdateMutationError = ErrorType<unknown>;

export const useProductsControllerUpdate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof productsControllerUpdate>>,
    TError,
    { id: string; data: BodyType<UpdateProductDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof productsControllerUpdate>>,
  TError,
  { id: string; data: BodyType<UpdateProductDto> },
  TContext
> => {
  const mutationOptions = getProductsControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const productsControllerRemove = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/products/${id}`, method: "DELETE" },
    options,
  );
};

export const getProductsControllerRemoveMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof productsControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof productsControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof productsControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return productsControllerRemove(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ProductsControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof productsControllerRemove>>
>;

export type ProductsControllerRemoveMutationError = ErrorType<unknown>;

export const useProductsControllerRemove = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof productsControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof productsControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getProductsControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions);
};

export const ordersControllerCreate = (
  createOrderDto: BodyType<CreateOrderDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/api/orders`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createOrderDto,
    },
    options,
  );
};

export const getOrdersControllerCreateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ordersControllerCreate>>,
    TError,
    { data: BodyType<CreateOrderDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof ordersControllerCreate>>,
  TError,
  { data: BodyType<CreateOrderDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof ordersControllerCreate>>,
    { data: BodyType<CreateOrderDto> }
  > = (props) => {
    const { data } = props ?? {};

    return ordersControllerCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type OrdersControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof ordersControllerCreate>>
>;
export type OrdersControllerCreateMutationBody = BodyType<CreateOrderDto>;
export type OrdersControllerCreateMutationError = ErrorType<unknown>;

export const useOrdersControllerCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ordersControllerCreate>>,
    TError,
    { data: BodyType<CreateOrderDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof ordersControllerCreate>>,
  TError,
  { data: BodyType<CreateOrderDto> },
  TContext
> => {
  const mutationOptions = getOrdersControllerCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const ordersControllerFindAll = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/api/orders`, method: "GET", signal },
    options,
  );
};

export const getOrdersControllerFindAllQueryKey = () => {
  return [`/api/orders`] as const;
};

export const getOrdersControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof ordersControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof ordersControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getOrdersControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ordersControllerFindAll>>
  > = ({ signal }) => ordersControllerFindAll(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ordersControllerFindAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type OrdersControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof ordersControllerFindAll>>
>;
export type OrdersControllerFindAllQueryError = ErrorType<unknown>;

export function useOrdersControllerFindAll<
  TData = Awaited<ReturnType<typeof ordersControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof ordersControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof ordersControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useOrdersControllerFindAll<
  TData = Awaited<ReturnType<typeof ordersControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof ordersControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof ordersControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useOrdersControllerFindAll<
  TData = Awaited<ReturnType<typeof ordersControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof ordersControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useOrdersControllerFindAll<
  TData = Awaited<ReturnType<typeof ordersControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof ordersControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getOrdersControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const ordersControllerFindOne = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/api/orders/${id}`, method: "GET", signal },
    options,
  );
};

export const getOrdersControllerFindOneQueryKey = (id: string) => {
  return [`/api/orders/${id}`] as const;
};

export const getOrdersControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof ordersControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ordersControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getOrdersControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ordersControllerFindOne>>
  > = ({ signal }) => ordersControllerFindOne(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof ordersControllerFindOne>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type OrdersControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof ordersControllerFindOne>>
>;
export type OrdersControllerFindOneQueryError = ErrorType<unknown>;

export function useOrdersControllerFindOne<
  TData = Awaited<ReturnType<typeof ordersControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ordersControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ordersControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useOrdersControllerFindOne<
  TData = Awaited<ReturnType<typeof ordersControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ordersControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ordersControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useOrdersControllerFindOne<
  TData = Awaited<ReturnType<typeof ordersControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ordersControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useOrdersControllerFindOne<
  TData = Awaited<ReturnType<typeof ordersControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ordersControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getOrdersControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const ordersControllerUpdate = (
  id: string,
  updateOrderDto: BodyType<UpdateOrderDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/api/orders/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateOrderDto,
    },
    options,
  );
};

export const getOrdersControllerUpdateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ordersControllerUpdate>>,
    TError,
    { id: string; data: BodyType<UpdateOrderDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof ordersControllerUpdate>>,
  TError,
  { id: string; data: BodyType<UpdateOrderDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof ordersControllerUpdate>>,
    { id: string; data: BodyType<UpdateOrderDto> }
  > = (props) => {
    const { id, data } = props ?? {};

    return ordersControllerUpdate(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type OrdersControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof ordersControllerUpdate>>
>;
export type OrdersControllerUpdateMutationBody = BodyType<UpdateOrderDto>;
export type OrdersControllerUpdateMutationError = ErrorType<unknown>;

export const useOrdersControllerUpdate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ordersControllerUpdate>>,
    TError,
    { id: string; data: BodyType<UpdateOrderDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof ordersControllerUpdate>>,
  TError,
  { id: string; data: BodyType<UpdateOrderDto> },
  TContext
> => {
  const mutationOptions = getOrdersControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const ordersControllerRemove = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/orders/${id}`, method: "DELETE" },
    options,
  );
};

export const getOrdersControllerRemoveMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ordersControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof ordersControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof ordersControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return ordersControllerRemove(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type OrdersControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof ordersControllerRemove>>
>;

export type OrdersControllerRemoveMutationError = ErrorType<unknown>;

export const useOrdersControllerRemove = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ordersControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof ordersControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getOrdersControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions);
};

export const orderItemsControllerFindAll = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/api/order-items`, method: "GET", signal },
    options,
  );
};

export const getOrderItemsControllerFindAllQueryKey = () => {
  return [`/api/order-items`] as const;
};

export const getOrderItemsControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof orderItemsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof orderItemsControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getOrderItemsControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof orderItemsControllerFindAll>>
  > = ({ signal }) => orderItemsControllerFindAll(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof orderItemsControllerFindAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type OrderItemsControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof orderItemsControllerFindAll>>
>;
export type OrderItemsControllerFindAllQueryError = ErrorType<unknown>;

export function useOrderItemsControllerFindAll<
  TData = Awaited<ReturnType<typeof orderItemsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof orderItemsControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof orderItemsControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useOrderItemsControllerFindAll<
  TData = Awaited<ReturnType<typeof orderItemsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof orderItemsControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof orderItemsControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useOrderItemsControllerFindAll<
  TData = Awaited<ReturnType<typeof orderItemsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof orderItemsControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useOrderItemsControllerFindAll<
  TData = Awaited<ReturnType<typeof orderItemsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof orderItemsControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getOrderItemsControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const orderItemsControllerFindOne = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/api/order-items/${id}`, method: "GET", signal },
    options,
  );
};

export const getOrderItemsControllerFindOneQueryKey = (id: string) => {
  return [`/api/order-items/${id}`] as const;
};

export const getOrderItemsControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof orderItemsControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof orderItemsControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getOrderItemsControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof orderItemsControllerFindOne>>
  > = ({ signal }) => orderItemsControllerFindOne(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof orderItemsControllerFindOne>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type OrderItemsControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof orderItemsControllerFindOne>>
>;
export type OrderItemsControllerFindOneQueryError = ErrorType<unknown>;

export function useOrderItemsControllerFindOne<
  TData = Awaited<ReturnType<typeof orderItemsControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof orderItemsControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof orderItemsControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useOrderItemsControllerFindOne<
  TData = Awaited<ReturnType<typeof orderItemsControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof orderItemsControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof orderItemsControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useOrderItemsControllerFindOne<
  TData = Awaited<ReturnType<typeof orderItemsControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof orderItemsControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useOrderItemsControllerFindOne<
  TData = Awaited<ReturnType<typeof orderItemsControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof orderItemsControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getOrderItemsControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const paymentsControllerFindAll = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/api/payments`, method: "GET", signal },
    options,
  );
};

export const getPaymentsControllerFindAllQueryKey = () => {
  return [`/api/payments`] as const;
};

export const getPaymentsControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof paymentsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof paymentsControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getPaymentsControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof paymentsControllerFindAll>>
  > = ({ signal }) => paymentsControllerFindAll(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof paymentsControllerFindAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type PaymentsControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof paymentsControllerFindAll>>
>;
export type PaymentsControllerFindAllQueryError = ErrorType<unknown>;

export function usePaymentsControllerFindAll<
  TData = Awaited<ReturnType<typeof paymentsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof paymentsControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof paymentsControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function usePaymentsControllerFindAll<
  TData = Awaited<ReturnType<typeof paymentsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof paymentsControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof paymentsControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function usePaymentsControllerFindAll<
  TData = Awaited<ReturnType<typeof paymentsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof paymentsControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function usePaymentsControllerFindAll<
  TData = Awaited<ReturnType<typeof paymentsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof paymentsControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getPaymentsControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const paymentsControllerFindOne = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/api/payments/${id}`, method: "GET", signal },
    options,
  );
};

export const getPaymentsControllerFindOneQueryKey = (id: string) => {
  return [`/api/payments/${id}`] as const;
};

export const getPaymentsControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof paymentsControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof paymentsControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getPaymentsControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof paymentsControllerFindOne>>
  > = ({ signal }) => paymentsControllerFindOne(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof paymentsControllerFindOne>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type PaymentsControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof paymentsControllerFindOne>>
>;
export type PaymentsControllerFindOneQueryError = ErrorType<unknown>;

export function usePaymentsControllerFindOne<
  TData = Awaited<ReturnType<typeof paymentsControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof paymentsControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof paymentsControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function usePaymentsControllerFindOne<
  TData = Awaited<ReturnType<typeof paymentsControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof paymentsControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof paymentsControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function usePaymentsControllerFindOne<
  TData = Awaited<ReturnType<typeof paymentsControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof paymentsControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function usePaymentsControllerFindOne<
  TData = Awaited<ReturnType<typeof paymentsControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof paymentsControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getPaymentsControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const wishListsControllerFindAll = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/api/wish-lists`, method: "GET", signal },
    options,
  );
};

export const getWishListsControllerFindAllQueryKey = () => {
  return [`/api/wish-lists`] as const;
};

export const getWishListsControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof wishListsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof wishListsControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getWishListsControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof wishListsControllerFindAll>>
  > = ({ signal }) => wishListsControllerFindAll(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof wishListsControllerFindAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type WishListsControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof wishListsControllerFindAll>>
>;
export type WishListsControllerFindAllQueryError = ErrorType<unknown>;

export function useWishListsControllerFindAll<
  TData = Awaited<ReturnType<typeof wishListsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof wishListsControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof wishListsControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useWishListsControllerFindAll<
  TData = Awaited<ReturnType<typeof wishListsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof wishListsControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof wishListsControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useWishListsControllerFindAll<
  TData = Awaited<ReturnType<typeof wishListsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof wishListsControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useWishListsControllerFindAll<
  TData = Awaited<ReturnType<typeof wishListsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof wishListsControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getWishListsControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const wishListsControllerFindOne = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/api/wish-lists/${id}`, method: "GET", signal },
    options,
  );
};

export const getWishListsControllerFindOneQueryKey = (id: string) => {
  return [`/api/wish-lists/${id}`] as const;
};

export const getWishListsControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof wishListsControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof wishListsControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getWishListsControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof wishListsControllerFindOne>>
  > = ({ signal }) => wishListsControllerFindOne(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof wishListsControllerFindOne>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type WishListsControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof wishListsControllerFindOne>>
>;
export type WishListsControllerFindOneQueryError = ErrorType<unknown>;

export function useWishListsControllerFindOne<
  TData = Awaited<ReturnType<typeof wishListsControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof wishListsControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof wishListsControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useWishListsControllerFindOne<
  TData = Awaited<ReturnType<typeof wishListsControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof wishListsControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof wishListsControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useWishListsControllerFindOne<
  TData = Awaited<ReturnType<typeof wishListsControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof wishListsControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useWishListsControllerFindOne<
  TData = Awaited<ReturnType<typeof wishListsControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof wishListsControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getWishListsControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const reviewsControllerFindAll = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/api/reviews`, method: "GET", signal },
    options,
  );
};

export const getReviewsControllerFindAllQueryKey = () => {
  return [`/api/reviews`] as const;
};

export const getReviewsControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof reviewsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof reviewsControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getReviewsControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof reviewsControllerFindAll>>
  > = ({ signal }) => reviewsControllerFindAll(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof reviewsControllerFindAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ReviewsControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof reviewsControllerFindAll>>
>;
export type ReviewsControllerFindAllQueryError = ErrorType<unknown>;

export function useReviewsControllerFindAll<
  TData = Awaited<ReturnType<typeof reviewsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof reviewsControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof reviewsControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useReviewsControllerFindAll<
  TData = Awaited<ReturnType<typeof reviewsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof reviewsControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof reviewsControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useReviewsControllerFindAll<
  TData = Awaited<ReturnType<typeof reviewsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof reviewsControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useReviewsControllerFindAll<
  TData = Awaited<ReturnType<typeof reviewsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof reviewsControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getReviewsControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const reviewsControllerFindOne = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/api/reviews/${id}`, method: "GET", signal },
    options,
  );
};

export const getReviewsControllerFindOneQueryKey = (id: string) => {
  return [`/api/reviews/${id}`] as const;
};

export const getReviewsControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof reviewsControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof reviewsControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getReviewsControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof reviewsControllerFindOne>>
  > = ({ signal }) => reviewsControllerFindOne(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof reviewsControllerFindOne>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ReviewsControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof reviewsControllerFindOne>>
>;
export type ReviewsControllerFindOneQueryError = ErrorType<unknown>;

export function useReviewsControllerFindOne<
  TData = Awaited<ReturnType<typeof reviewsControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof reviewsControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof reviewsControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useReviewsControllerFindOne<
  TData = Awaited<ReturnType<typeof reviewsControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof reviewsControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof reviewsControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useReviewsControllerFindOne<
  TData = Awaited<ReturnType<typeof reviewsControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof reviewsControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useReviewsControllerFindOne<
  TData = Awaited<ReturnType<typeof reviewsControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof reviewsControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getReviewsControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const clientsControllerFindAll = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/api/clients`, method: "GET", signal },
    options,
  );
};

export const getClientsControllerFindAllQueryKey = () => {
  return [`/api/clients`] as const;
};

export const getClientsControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof clientsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof clientsControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getClientsControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof clientsControllerFindAll>>
  > = ({ signal }) => clientsControllerFindAll(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof clientsControllerFindAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ClientsControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof clientsControllerFindAll>>
>;
export type ClientsControllerFindAllQueryError = ErrorType<unknown>;

export function useClientsControllerFindAll<
  TData = Awaited<ReturnType<typeof clientsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof clientsControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof clientsControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useClientsControllerFindAll<
  TData = Awaited<ReturnType<typeof clientsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof clientsControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof clientsControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useClientsControllerFindAll<
  TData = Awaited<ReturnType<typeof clientsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof clientsControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useClientsControllerFindAll<
  TData = Awaited<ReturnType<typeof clientsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof clientsControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getClientsControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const clientsControllerFindOne = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/api/clients/${id}`, method: "GET", signal },
    options,
  );
};

export const getClientsControllerFindOneQueryKey = (id: string) => {
  return [`/api/clients/${id}`] as const;
};

export const getClientsControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof clientsControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof clientsControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getClientsControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof clientsControllerFindOne>>
  > = ({ signal }) => clientsControllerFindOne(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof clientsControllerFindOne>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ClientsControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof clientsControllerFindOne>>
>;
export type ClientsControllerFindOneQueryError = ErrorType<unknown>;

export function useClientsControllerFindOne<
  TData = Awaited<ReturnType<typeof clientsControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof clientsControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof clientsControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useClientsControllerFindOne<
  TData = Awaited<ReturnType<typeof clientsControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof clientsControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof clientsControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useClientsControllerFindOne<
  TData = Awaited<ReturnType<typeof clientsControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof clientsControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useClientsControllerFindOne<
  TData = Awaited<ReturnType<typeof clientsControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof clientsControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getClientsControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const addressesControllerFindAll = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/api/addresses`, method: "GET", signal },
    options,
  );
};

export const getAddressesControllerFindAllQueryKey = () => {
  return [`/api/addresses`] as const;
};

export const getAddressesControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof addressesControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof addressesControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAddressesControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof addressesControllerFindAll>>
  > = ({ signal }) => addressesControllerFindAll(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof addressesControllerFindAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AddressesControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof addressesControllerFindAll>>
>;
export type AddressesControllerFindAllQueryError = ErrorType<unknown>;

export function useAddressesControllerFindAll<
  TData = Awaited<ReturnType<typeof addressesControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof addressesControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof addressesControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useAddressesControllerFindAll<
  TData = Awaited<ReturnType<typeof addressesControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof addressesControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof addressesControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useAddressesControllerFindAll<
  TData = Awaited<ReturnType<typeof addressesControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof addressesControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useAddressesControllerFindAll<
  TData = Awaited<ReturnType<typeof addressesControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof addressesControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAddressesControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const addressesControllerFindOne = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/api/addresses/${id}`, method: "GET", signal },
    options,
  );
};

export const getAddressesControllerFindOneQueryKey = (id: string) => {
  return [`/api/addresses/${id}`] as const;
};

export const getAddressesControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof addressesControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof addressesControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAddressesControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof addressesControllerFindOne>>
  > = ({ signal }) => addressesControllerFindOne(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof addressesControllerFindOne>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AddressesControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof addressesControllerFindOne>>
>;
export type AddressesControllerFindOneQueryError = ErrorType<unknown>;

export function useAddressesControllerFindOne<
  TData = Awaited<ReturnType<typeof addressesControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof addressesControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof addressesControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useAddressesControllerFindOne<
  TData = Awaited<ReturnType<typeof addressesControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof addressesControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof addressesControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useAddressesControllerFindOne<
  TData = Awaited<ReturnType<typeof addressesControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof addressesControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useAddressesControllerFindOne<
  TData = Awaited<ReturnType<typeof addressesControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof addressesControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAddressesControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const addressesControllerRemove = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/addresses/${id}`, method: "DELETE" },
    options,
  );
};

export const getAddressesControllerRemoveMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addressesControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addressesControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addressesControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return addressesControllerRemove(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddressesControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof addressesControllerRemove>>
>;

export type AddressesControllerRemoveMutationError = ErrorType<unknown>;

export const useAddressesControllerRemove = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addressesControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof addressesControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getAddressesControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions);
};

export const imageControllerUploadImage = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/images/upload`, method: "POST" },
    options,
  );
};

export const getImageControllerUploadImageMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof imageControllerUploadImage>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof imageControllerUploadImage>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof imageControllerUploadImage>>,
    void
  > = () => {
    return imageControllerUploadImage(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ImageControllerUploadImageMutationResult = NonNullable<
  Awaited<ReturnType<typeof imageControllerUploadImage>>
>;

export type ImageControllerUploadImageMutationError = ErrorType<unknown>;

export const useImageControllerUploadImage = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof imageControllerUploadImage>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof imageControllerUploadImage>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getImageControllerUploadImageMutationOptions(options);

  return useMutation(mutationOptions);
};

export const imageControllerGetImageLink = (
  image: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/api/images/${image}`, method: "GET", signal },
    options,
  );
};

export const getImageControllerGetImageLinkQueryKey = (image: string) => {
  return [`/api/images/${image}`] as const;
};

export const getImageControllerGetImageLinkQueryOptions = <
  TData = Awaited<ReturnType<typeof imageControllerGetImageLink>>,
  TError = ErrorType<unknown>,
>(
  image: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof imageControllerGetImageLink>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getImageControllerGetImageLinkQueryKey(image);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof imageControllerGetImageLink>>
  > = ({ signal }) =>
    imageControllerGetImageLink(image, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!image,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof imageControllerGetImageLink>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ImageControllerGetImageLinkQueryResult = NonNullable<
  Awaited<ReturnType<typeof imageControllerGetImageLink>>
>;
export type ImageControllerGetImageLinkQueryError = ErrorType<unknown>;

export function useImageControllerGetImageLink<
  TData = Awaited<ReturnType<typeof imageControllerGetImageLink>>,
  TError = ErrorType<unknown>,
>(
  image: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof imageControllerGetImageLink>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof imageControllerGetImageLink>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useImageControllerGetImageLink<
  TData = Awaited<ReturnType<typeof imageControllerGetImageLink>>,
  TError = ErrorType<unknown>,
>(
  image: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof imageControllerGetImageLink>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof imageControllerGetImageLink>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useImageControllerGetImageLink<
  TData = Awaited<ReturnType<typeof imageControllerGetImageLink>>,
  TError = ErrorType<unknown>,
>(
  image: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof imageControllerGetImageLink>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useImageControllerGetImageLink<
  TData = Awaited<ReturnType<typeof imageControllerGetImageLink>>,
  TError = ErrorType<unknown>,
>(
  image: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof imageControllerGetImageLink>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getImageControllerGetImageLinkQueryOptions(
    image,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const authControllerLogin = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/auth/login`, method: "POST" },
    options,
  );
};

export const getAuthControllerLoginMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogin>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerLogin>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerLogin>>,
    void
  > = () => {
    return authControllerLogin(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerLogin>>
>;

export type AuthControllerLoginMutationError = ErrorType<unknown>;

export const useAuthControllerLogin = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogin>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof authControllerLogin>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getAuthControllerLoginMutationOptions(options);

  return useMutation(mutationOptions);
};

export const authControllerRefreshToken = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/auth/refresh`, method: "POST" },
    options,
  );
};

export const getAuthControllerRefreshTokenMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerRefreshToken>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerRefreshToken>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerRefreshToken>>,
    void
  > = () => {
    return authControllerRefreshToken(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerRefreshTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerRefreshToken>>
>;

export type AuthControllerRefreshTokenMutationError = ErrorType<unknown>;

export const useAuthControllerRefreshToken = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerRefreshToken>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof authControllerRefreshToken>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getAuthControllerRefreshTokenMutationOptions(options);

  return useMutation(mutationOptions);
};

export const authControllerSignOut = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/auth/signout`, method: "POST" },
    options,
  );
};

export const getAuthControllerSignOutMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerSignOut>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerSignOut>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerSignOut>>,
    void
  > = () => {
    return authControllerSignOut(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerSignOutMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignOut>>
>;

export type AuthControllerSignOutMutationError = ErrorType<unknown>;

export const useAuthControllerSignOut = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerSignOut>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof authControllerSignOut>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getAuthControllerSignOutMutationOptions(options);

  return useMutation(mutationOptions);
};

export const authControllerGoogleLogin = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/api/auth/google/login`, method: "GET", signal },
    options,
  );
};

export const getAuthControllerGoogleLoginQueryKey = () => {
  return [`/api/auth/google/login`] as const;
};

export const getAuthControllerGoogleLoginQueryOptions = <
  TData = Awaited<ReturnType<typeof authControllerGoogleLogin>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof authControllerGoogleLogin>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAuthControllerGoogleLoginQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authControllerGoogleLogin>>
  > = ({ signal }) => authControllerGoogleLogin(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof authControllerGoogleLogin>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AuthControllerGoogleLoginQueryResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGoogleLogin>>
>;
export type AuthControllerGoogleLoginQueryError = ErrorType<unknown>;

export function useAuthControllerGoogleLogin<
  TData = Awaited<ReturnType<typeof authControllerGoogleLogin>>,
  TError = ErrorType<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof authControllerGoogleLogin>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof authControllerGoogleLogin>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useAuthControllerGoogleLogin<
  TData = Awaited<ReturnType<typeof authControllerGoogleLogin>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof authControllerGoogleLogin>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof authControllerGoogleLogin>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useAuthControllerGoogleLogin<
  TData = Awaited<ReturnType<typeof authControllerGoogleLogin>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof authControllerGoogleLogin>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useAuthControllerGoogleLogin<
  TData = Awaited<ReturnType<typeof authControllerGoogleLogin>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof authControllerGoogleLogin>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAuthControllerGoogleLoginQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const authControllerGoogleCallback = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/api/auth/google/callback`, method: "GET", signal },
    options,
  );
};

export const getAuthControllerGoogleCallbackQueryKey = () => {
  return [`/api/auth/google/callback`] as const;
};

export const getAuthControllerGoogleCallbackQueryOptions = <
  TData = Awaited<ReturnType<typeof authControllerGoogleCallback>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof authControllerGoogleCallback>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAuthControllerGoogleCallbackQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authControllerGoogleCallback>>
  > = ({ signal }) => authControllerGoogleCallback(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof authControllerGoogleCallback>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AuthControllerGoogleCallbackQueryResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGoogleCallback>>
>;
export type AuthControllerGoogleCallbackQueryError = ErrorType<unknown>;

export function useAuthControllerGoogleCallback<
  TData = Awaited<ReturnType<typeof authControllerGoogleCallback>>,
  TError = ErrorType<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof authControllerGoogleCallback>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof authControllerGoogleCallback>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useAuthControllerGoogleCallback<
  TData = Awaited<ReturnType<typeof authControllerGoogleCallback>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof authControllerGoogleCallback>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof authControllerGoogleCallback>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useAuthControllerGoogleCallback<
  TData = Awaited<ReturnType<typeof authControllerGoogleCallback>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof authControllerGoogleCallback>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useAuthControllerGoogleCallback<
  TData = Awaited<ReturnType<typeof authControllerGoogleCallback>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof authControllerGoogleCallback>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAuthControllerGoogleCallbackQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
